package mocks

import context "context"
import licensing "github.com/docker/licensing"
import mock "github.com/stretchr/testify/mock"
import model "github.com/docker/licensing/model"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// DownloadLicenseFromHub provides a mock function with given fields: ctx, authToken, subscriptionID
func (_m *Client) DownloadLicenseFromHub(ctx context.Context, authToken string, subscriptionID string) (*model.IssuedLicense, error) {
	ret := _m.Called(ctx, authToken, subscriptionID)

	var r0 *model.IssuedLicense
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.IssuedLicense); ok {
		r0 = rf(ctx, authToken, subscriptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IssuedLicense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, authToken, subscriptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNewTrialSubscription provides a mock function with given fields: ctx, authToken, dockerID, email
func (_m *Client) GenerateNewTrialSubscription(ctx context.Context, authToken string, dockerID string, email string) (string, error) {
	ret := _m.Called(ctx, authToken, dockerID, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, authToken, dockerID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, authToken, dockerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHubUserByName provides a mock function with given fields: ctx, username
func (_m *Client) GetHubUserByName(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHubUserOrgs provides a mock function with given fields: ctx, authToken
func (_m *Client) GetHubUserOrgs(ctx context.Context, authToken string) ([]model.Org, error) {
	ret := _m.Called(ctx, authToken)

	var r0 []model.Org
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Org); ok {
		r0 = rf(ctx, authToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, authToken, dockerID
func (_m *Client) ListSubscriptions(ctx context.Context, authToken string, dockerID string) ([]*model.Subscription, error) {
	ret := _m.Called(ctx, authToken, dockerID)

	var r0 []*model.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*model.Subscription); ok {
		r0 = rf(ctx, authToken, dockerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, authToken, dockerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionsDetails provides a mock function with given fields: ctx, authToken, dockerID
func (_m *Client) ListSubscriptionsDetails(ctx context.Context, authToken string, dockerID string) ([]*model.SubscriptionDetail, error) {
	ret := _m.Called(ctx, authToken, dockerID)

	var r0 []*model.SubscriptionDetail
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*model.SubscriptionDetail); ok {
		r0 = rf(ctx, authToken, dockerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SubscriptionDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, authToken, dockerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadLocalLicense provides a mock function with given fields: ctx, dclnt
func (_m *Client) LoadLocalLicense(ctx context.Context, dclnt licensing.WrappedDockerClient) (*model.Subscription, error) {
	ret := _m.Called(ctx, dclnt)

	var r0 *model.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, licensing.WrappedDockerClient) *model.Subscription); ok {
		r0 = rf(ctx, dclnt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, licensing.WrappedDockerClient) error); ok {
		r1 = rf(ctx, dclnt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginViaAuth provides a mock function with given fields: ctx, username, password
func (_m *Client) LoginViaAuth(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseLicense provides a mock function with given fields: license
func (_m *Client) ParseLicense(license []byte) (*model.IssuedLicense, error) {
	ret := _m.Called(license)

	var r0 *model.IssuedLicense
	if rf, ok := ret.Get(0).(func([]byte) *model.IssuedLicense); ok {
		r0 = rf(license)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IssuedLicense)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(license)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreLicense provides a mock function with given fields: ctx, dclnt, licenses, localRootDir
func (_m *Client) StoreLicense(ctx context.Context, dclnt licensing.WrappedDockerClient, licenses *model.IssuedLicense, localRootDir string) error {
	ret := _m.Called(ctx, dclnt, licenses, localRootDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, licensing.WrappedDockerClient, *model.IssuedLicense, string) error); ok {
		r0 = rf(ctx, dclnt, licenses, localRootDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SummarizeLicense provides a mock function with given fields: res, keyID
func (_m *Client) SummarizeLicense(res *model.CheckResponse, keyID string) *model.Subscription {
	ret := _m.Called(res, keyID)

	var r0 *model.Subscription
	if rf, ok := ret.Get(0).(func(*model.CheckResponse, string) *model.Subscription); ok {
		r0 = rf(res, keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	return r0
}

// VerifyLicense provides a mock function with given fields: ctx, license
func (_m *Client) VerifyLicense(ctx context.Context, license model.IssuedLicense) (*model.CheckResponse, error) {
	ret := _m.Called(ctx, license)

	var r0 *model.CheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.IssuedLicense) *model.CheckResponse); ok {
		r0 = rf(ctx, license)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.IssuedLicense) error); ok {
		r1 = rf(ctx, license)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
